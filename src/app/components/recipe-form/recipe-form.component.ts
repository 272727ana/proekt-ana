import { NgIf } from '@angular/common';
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { MatOptionModule } from '@angular/material/core';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { ActivatedRoute, Router } from '@angular/router';
import { RecipeService } from '../../services/recipe.service';
import { Recipe } from '../../models/recipe';

@Component({
  selector: 'app-recipe-form',
  imports: [MatFormFieldModule, MatIconModule, NgIf, ReactiveFormsModule,MatOptionModule,MatInputModule,MatSelectModule],
  templateUrl: './recipe-form.component.html',
  styleUrl: './recipe-form.component.css'
})
export class RecipeFormComponent {
  recipeForm!: FormGroup;
  isEditMode = false;
  recipeId?: number;

  constructor(    private fb: FormBuilder,
    private recipeService: RecipeService,
    private route: ActivatedRoute,
    private router: Router,)
  {}

  ngOnInit(): void {
    this.recipeForm= this.fb.group({
      title: ['', Validators.required],
      description: ['', Validators.required],
      instructions:['', [Validators.required]],
      cookingTime: ['', Validators.required],
      difficulty: ['', Validators.required],
      imageUrl: ['', Validators.required],
    })

    this.route.params.subscribe((params) => {
      this.recipeId = +params['id'];
      if (this.recipeId) {
        this.isEditMode = true;
        this.loadRecipeDetails(this.recipeId);
      }
    });
  }
  loadRecipeDetails(recipeId: number):void {
    this.recipeService.fetchSpecificRecipe(recipeId).subscribe((recipe) => {
      this.recipeForm.patchValue({
        title: recipe.title,
        description: recipe.description,
        instructions: recipe.instructions,
        cookingTime: recipe.cookingTime,
        difficulty: recipe.difficulty,
        imageUrl: recipe.imageUrl,
      });
    });
  }

  submit(): void {
    if (this.recipeForm.invalid) return;

    const recipeData: Recipe = this.recipeForm.value;

    const newRecipe: Recipe = {
      id: 0, // Typically, this would be generated by the server
      title: recipeData.title,
      description: recipeData.description,
      instructions: recipeData.instructions,
      cookingTime: recipeData.cookingTime,
      difficulty: recipeData.difficulty,
      ingredients: [{ 'id': 2, "name": "Cheese" }], // You'll need to implement the logic to get ingredients
      imageUrl: recipeData.imageUrl,
      category: 'General', // Set category or get from user input
      favorite: false // Set default or use form value
    };

    if (this.isEditMode && this.recipeId) {
      this.recipeService.updateRecipe(newRecipe).subscribe(() => {
        this.router.navigate(['/recipes']); // Redirect to list page after save
      });
    } else {
      this.recipeService.createRecipe(newRecipe).subscribe(() => {
        this.router.navigate(['/recipes']); // Redirect to list page after save
      });
    }
  }

  goBack(): void {
    this.router.navigate(['/recipes']); // Redirect to items list
  }
}
